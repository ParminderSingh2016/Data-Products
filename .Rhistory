plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l',ylab ="Energy sub metering", xlab="")lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1,1),col=c("black","red","blue"))
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l',ylab ="Energy sub metering", xlab="")lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),lty=c(1,1,1),col=c("black","red","blue"))
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l',
ylab ="Energy sub metering", xlab="")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1)
,col=c("black","red","blue"))
legend("topright", col = c("black", "red", "blue"), lty = 1, lwd = 2,
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l',
ylab ="Energy sub metering", xlab="")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend("topright", col = c("black", "red", "blue"), lty = 1, lwd = 2,
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty = c(1,1,1), lwd = c(2,2,2), col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l',
ylab ="Energy sub metering", xlab="")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend("topright", lty = c(1,1,1), lwd = c(2,2,2), col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
par(mfcol=c(2,2))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1),col=c("black","red","blue"))
par(mfcol=c(2,2))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1),col=c("black","red","blue"))
plot(data2$DateTime, as.numeric(as.character(data2$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data2$DateTime, as.numeric(as.character(data2$Global_reactive_power)),type='l',
ylab="Global_reactive_power",xlab="datetime" )
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
legend('topright', c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
lty=c(1,1,1),col=c("black","red","blue"))
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
plot(data2$DateTime, as.numeric(as.character(data2$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data2$DateTime, as.numeric(as.character(data2$Global_reactive_power)),type='l',
ylab="Global_reactive_power",xlab="datetime" )
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
plot(data2$DateTime, as.numeric(as.character(data2$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
par(mfrow = c(2,2), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Voltage)),type='l',
ylab="Voltage",xlab="datetime" )
plot(data2$DateTime, as.numeric(as.character(data2$Sub_metering_1)),type='l', xlab="",ylab ="Energy sub metering")
lines(data2$DateTime, as.numeric(as.character(data2$Sub_metering_2)),type='l', col='red')
lines(data2$DateTime, data2$Sub_metering_3,type='l', col="blue")
plot(data2$DateTime, as.numeric(as.character(data2$Global_reactive_power)),type='l',
ylab="Global_reactive_power",xlab="datetime" )
hist(as.numeric(as.character(data2$Global_active_power)),main="Global Active Power",xlab="Global Active Power (kilowatts)", col="red")
source('C:/Users/Parminder/Desktop/assignments/Plots/ExData_Plotting1/Plot1.R')
type='l',ylab="Global Active Power (Kilowatts)", xlab="")
plot(data2$DateTime, as.numeric(as.character(data2$Global_active_power)),type='l',ylab="Global Active Power (Kilowatts)", xlab="")
data<-read.table("C:/Users/Parminder/Desktop/assignments/Plots/ExData_Plotting1/exdata-data-household_power_consumption/household_power_consumption.txt",header = TRUE, sep= ";")
data<-read.table("C:/Users/Parminder/Desktop/assignments/Plots/ExData_Plotting1/exdata-data-household_power_consumption/household_power_consumption.txt",header = TRUE, sep= ";")
source('C:/Users/Parminder/Desktop/assignments/Strom Data/StormData.csv', encoding = 'UTF-8')
install.packages("dplyr")
install.packages("tidyr")
data<-tbl_df(read.csv("repdata-data-StormData.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE))
str(data)
data<-tbl_df(read.csv("StormData.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE))
str(data)
source('C:/Users/Parminder/Desktop/assignments/Strom Data/StormData.csv', encoding = 'UTF-8')
data<-tbl_df(read.csv(bzfile("StormData.csv.bz2"), sep = ",", header = TRUE, stringsAsFactors = FALSE))
str(data)
data<-read.csv("StormData.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
str(data)
data<-read.csv("C:/Users/Parminder/Desktop/assignments/Strom Data/StormData.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
plt_data <- data_public %>%
group_by(EVTYPE) %>%
summarise_each(funs(sum)) %>%
mutate(total=FATALITIES+INJURIES) %>%
gather("Impact", "NumCases", 2:3) %>%
group_by(Impact) %>%
top_n(10, NumCases) %>%
arrange(desc(total))
ggplot(plt_data, aes(x=reorder(EVTYPE,-total), y=NumCases, fill=Impact)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(~Impact, scales="free_y", ncol=1) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
xlab("Event types") +
ylab("Total number of cases") +
labs(title="Top 10 events causing death or injury")
plt_data <- data_public
group_by(EVTYPE)
summarise_each(funs(sum))
mutate(total=FATALITIES+INJURIES)
gather("Impact", "NumCases", 2:3)
group_by(Impact)
top_n(10, NumCases)
arrange(desc(total))
ggplot(plt_data, aes(x=reorder(EVTYPE,-total), y=NumCases, fill=Impact)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(~Impact, scales="free_y", ncol=1) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
xlab("Event types") +
ylab("Total number of cases") +
labs(title="Top 10 events causing death or injury")
library("magrittr", lib.loc="~/R/win-library/3.2")
plt_data <- data_public %>%
group_by(EVTYPE) %>%
summarise_each(funs(sum)) %>%
mutate(total=FATALITIES+INJURIES) %>%
gather("Impact", "NumCases", 2:3) %>%
group_by(Impact) %>%
top_n(10, NumCases) %>%
arrange(desc(total))
ggplot(plt_data, aes(x=reorder(EVTYPE,-total), y=NumCases, fill=Impact)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(~Impact, scales="free_y", ncol=1) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
xlab("Event types") +
ylab("Total number of cases") +
labs(title="Top 10 events causing death or injury")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
plt_data <- data_public %>%
group_by(EVTYPE) %>%
summarise_each(funs(sum)) %>%
mutate(total=FATALITIES+INJURIES) %>%
gather("Impact", "NumCases", 2:3) %>%
group_by(Impact) %>%
top_n(10, NumCases) %>%
arrange(desc(total))
ggplot(plt_data, aes(x=reorder(EVTYPE,-total), y=NumCases, fill=Impact)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(~Impact, scales="free_y", ncol=1) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
xlab("Event types") +
ylab("Total number of cases") +
labs(title="Top 10 events causing death or injury")
plt_data <- data_public %>%
group_by(EVTYPE) %>%
summarise_each(funs(sum)) %>%
mutate(total=FATALITIES+INJURIES) %>%
gather("Impact", "NumCases", 2:3) %>%
group_by(Impact) %>%
top_n(10, NumCases) %>%
arrange(desc(total))
ggplot(plt_data, aes(x=reorder(EVTYPE,-total), y=NumCases, fill=Impact)) +
geom_bar(stat="identity", position="dodge") +
facet_wrap(~Impact, scales="free_y", ncol=1) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
xlab("Event types") +
ylab("Total number of cases") +
labs(title="Top 10 events causing death or injury")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(warning=FALSE)
fig.height(ggplot)
---
knitr::opts_chunk$set(fig.width=12, fig.height=18,                echo=FALSE, warning=FALSE, message=FALSE)
fileurl<- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
temp<-tempfile()
download.file(fileurl, temp)
```
title: "Coursera Assignment"
hist(mns,col="grey",breaks=100,main="Distribution of Means of rexp")
abline(v = theor_mean,col=3,lwd=2)
abline(v = sample_mean,col=2,lwd=2)
legend('topright', c("Sample Mean", "Theoretical Mean"),bty = "n",lty = c(1,1),
col = c(col = 3, col = 2))
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
for (i in 1 : nsim)
mns <- c(mns, mean(rexp(40,lambda)))
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
for (i in 1 : nsim)
mns <- c(mns, mean(rexp(40,lambda)))
mns
hist(mns,col="grey",breaks=100,main="Distribution of Means of rexp")
abline(v = theor_mean,col=3,lwd=2)
abline(v = sample_mean,col=2,lwd=2)
legend('topright', c("Sample Mean", "Theoretical Mean"),bty = "n",lty = c(1,1),
col = c(col = 3, col = 2))
sample_mean <- mean(mns)
sample_mean
sample_mean <- mean(mns$Mean)
sample_mean
sample_mean <- mean(mns$Index)
sample_mean
sample_mean <- mean(mns)
sample_mean
sample_mean <- mean(is.numeric(mns))
sample_mean
sample_mean <- mean(mns$Mean)
sample_mean
sample_mean <- mean(mns$Mean)
sample_mean
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
for (i in 1 : nsim)
mns <- c(mns, mean(rexp(40,lambda)))
sample_mean <- mean(mns$Mean)
sample_mean
sample_mean <- mean(, )
sample_mean
sample_mean <- mean(,1)
sample_mean
sample_mean <- mean( ,)
sample_mean
mean(rexp(40,lambda))
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
m<-mean(rexp(40,lambda))
for (i in 1 : nsim)
mns <- c(mns, m)
sample_mean <- mean(mns$m)
sample_mean
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
m<-mean(rexp(40,lambda))
for (i in 1 : nsim)
mns <- c(mns, m)
m
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
for (i in 1 : nsim) mns <- c(mns, mean(rexp(40,lambda)))
sample_mean <- mean( ,)
sample_mean
sample_mean <- mean(mns$Mean)
sample_mean
sample_mean <- mean(mns$mean(rexp(40,lambda)))
sample_mean
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
for (i in 1 : nsim) mns <- c(mns, mean(rexp(40,lambda)))
mns
sample_mean <- mean([mns$Mean])
sample_mean
sample_mean <- mean(mns[, ])
sample_mean
sample_mean <- mean(mns[ ,])
sample_mean
sample_mean <- mean(mns)
sample_mean
sample_mean <- mean([mns])
sample_mean
sample_mean <- mean([,mns])
sample_mean
sample_mean <- mean([mns, ])
sample_mean
sample_mean <- mean([ ,mns])
sample_mean
library(ggplot2)
set.seed(259)
lambda <- 0.2
nexp <- 40
nsim <- 1000
mns <- data.frame(ncol=2,nrow=1000)
names(mns) <- c("Index","Mean")
for (i in 1 : nsim)
{
mns[i,1] <- i
mns[i,2] <- mean(rexp(40,lambda))
}
mns
sample_mean <- mean(mns$Mean)
sample_mean
theor_mean <- 1/lambda
theor_mean
varxp <- ((1/lambda)^2)/nexp
varxp <- ((1/lambda)^2)/nexp
varmean <- var(mns)
varxp <- ((1/lambda)^2)/nexp
varxp
varmean
varxp <- ((1/lambda)^2)/nexp
varmean <- var(mns$Mean)
varxp
varmean
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=mean(mns$Mean), sd=sqrt(varmean)),color = "black", size = 1.0)
plotdata <- data.frame(mns$Mean)
plot1 <- ggplot(plotdata,aes(x = mns$Mean))
plot1 <- plot1 +geom_histogram(aes(y=..density..), colour="black",fill="grey")
plot1<-plot1 +labs(title="Distribution of Means of rexp", y="Density")
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0)
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=mean(mns$Mean), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot1)
plotdata <- data.frame(mns$Mean)
plot1 <- ggplot(plotdata,aes(x = mns$Mean))
plot1 <- plot1 +geom_histogram(aes(y=..density..), colour="black",fill="grey")
plot1<-plot1 +labs(title="Distribution of Means of rexp", y="Density")
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0)
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=mean(mns$Mean), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot1)
plotdata <- data.frame(mns)
plot1 <- ggplot(plotdata,aes(x = mns$Mean))
plot1 <- plot1 +geom_histogram(aes(y=..density..), colour="black",fill="grey")
plot1<-plot1 +labs(title="Distribution of Means of rexp", y="Density")
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0)
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=mean(mns$Mean), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot1)
plotdata <- data.frame(mns)
plot1 <- ggplot(plotdata,aes(x = mns))
plot1 <- plot1 +geom_histogram(aes(y=..density..), colour="black",fill="grey")
plot1<-plot1 +labs(title="Distribution of Means of rexp", y="Density")
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=1/lambda, sd=sqrt(varxp)),color = "red", size = 1.0)
plot1<-plot1 +stat_function(fun=dnorm,args=list( mean=mean(mns$Mean), sd=sqrt(varmean)),color = "black", size = 1.0)
print(plot1)
hist(mns$Mean,
breaks = 100,
prob = TRUE,
main = "Exponential Distribution n = 1000",
xlab = "Spread")
lines(density(mns$Mean))
abline(v = 1/lambda, col = 3)
xfit <- seq(min(mns$Mean), max(mns$Mean), length = 100)
yfit <- dnorm(xfit, mean = 1/lambda, sd = (1/lambda/sqrt(40)))
lines(xfit, yfit, pch = 22, col = 4, lty = 2)
legend('topright', c("Simulated Values", "Theoretical Values"),
bty = "n", lty = c(1,2), col = c(4, 3))
qqnorm(mns$Mean,main ="Normal Q-Q Plot")
qqline(mns$Mean,col = "3")
par( mfrow = c(2, 2))
plot(best.model)
Our outcome variable “class” is an unordered factor variable. Thus, we can choose our error type as 1-accuracy. We have a large sample size with N= 19622 in the Training data set. This allow us to divide our Training sample into subTraining and subTesting to allow cross-validation. Features with all missing values will be discarded as well as features that are irrelevant. All other features will be kept as relevant variables. Decision tree and random forest algorithms are known for their ability of detecting the features that are important for classification.
library(lattice);
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("RGtk2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
install.packages("GTK+")
remove.packages("RGtk2", lib="~/R/win-library/3.2")
install.packages("RGtk2")
library("rattle", lib.loc="~/R/win-library/3.2")
install.packages("RGtk2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
remove.packages("gWidgetsRGtk2", lib="~/R/win-library/3.2")
install.packages("gWidgetsRGtk2")
gbutton("This works!", container = gwindow("Test"), handler = function(h, ...){ dispose(h$obj) })
library("gWidgetsRGtk2", lib.loc="~/R/win-library/3.2")
library("RGtk2", lib.loc="~/R/win-library/3.2")
library("rattle", lib.loc="~/R/win-library/3.2")
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
library(rpart)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
install.packages("e1071")
install.packages("shiny")
shiny::runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
library("htmltools", lib.loc="~/R/win-library/3.2")
remove.packages("htmltools", lib="~/R/win-library/3.2")
install.packages("htmltools")
shiny::runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
shiny::runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
install.packages("devtools")
devtools::install_github("rstudio/shiny")
library("shiny", lib.loc="~/R/win-library/3.2")
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
detach("package:shiny", unload=TRUE)
shiny::runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
runap()
runapp()
runApp()
shiny::runApp('E:/desktop/assignments/shiny/Calorie_Calculator')
library(rsconnect)
deployApp()
library("knitr", lib.loc="~/R/win-library/3.2")
setwd("E:/desktop/assignments/shiny/Calorie_Calculator")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(rsconnect)
deployApp()
